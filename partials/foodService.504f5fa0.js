!function(){function e(e,t,a){if(!t.has(e))throw new TypeError("attempted to "+a+" private field on non-instance");return t.get(e)}function t(e,t){return t.get?t.get.call(e):t.value}function a(a,r){return t(a,e(a,r,"get"))}function r(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}function n(e,t,a){r(e,t),t.set(e,a)}function s(e,t,a){if(t.set)t.set.call(e,a);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=a}}function i(t,a,r){return s(t,e(t,a,"set"),r),r}function l(e,t){if(t.set){if(!t.get)throw new TypeError("attempted to read set only private field");return"__destrWrapper"in t||(t.__destrWrapper={set value(a){t.set.call(e,a)},get value(){return t.get.call(e)}}),t.__destrWrapper}if(!t.writable)throw new TypeError("attempted to set read only private field");return t}function o(t,a){return l(t,e(t,a,"update"))}var c=new WeakMap,d=new WeakMap,h=new WeakMap,u=new WeakMap,p=new WeakMap,m=new WeakMap,w=new WeakMap,g=new WeakMap;function f(e){return e.map((({strMeal:e,strMealThumb:t,idMeal:a})=>`<li class="meal__card" id="${a}">\n        <img class="meal__pic" src="${t}" alt="${e}" />\n        <p class="meal__desc">${e}</p>\n        </div>\n      </li>`)).join("")}function v(e,t,a){y.gallery.insertAdjacentHTML("beforeend",a),console.log(e),console.log(t),e<=t?y.loadMoreBtn.classList.add("is-hidden"):y.loadMoreBtn.classList.remove("is-hidden")}const y={form:document.querySelector(".js-search-form"),loadMoreBtn:document.querySelector(".js-load-more"),gallery:document.querySelector(".js-meals")},M=new class{async getData(){Object.assign(a(this,g),{s:a(this,h)});const e=await fetch(a(this,c)+new URLSearchParams(a(this,g)));if(!e.ok)throw new Error(error);return await e.json()}async getRandomData(){const e=[];for(let t=0;t<a(this,m);t++){const t=fetch(a(this,d)).then((e=>e.json()));e.push(t)}return await Promise.all(e)}pageUpdate(){o(this,u).value++}pageReset(){i(this,u,1)}get page(){return a(this,u)}set page(e){i(this,u,e)}get query(){return a(this,h)}set query(e){i(this,h,e)}get totalPages(){return a(this,w)}totalPagesUpdate(e){i(this,p,e),i(this,w,Math.ceil(a(this,p).length/a(this,m)))}chunkOfItems(){return a(this,p).slice(a(this,m)*(a(this,u)-1),a(this,m))}constructor(){n(this,c,{writable:!0,value:"https://www.themealdb.com/api/json/v1/1/search.php?"}),n(this,d,{writable:!0,value:"https://www.themealdb.com/api/json/v1/1/random.php?"}),n(this,h,{writable:!0,value:void 0}),n(this,u,{writable:!0,value:void 0}),n(this,p,{writable:!0,value:void 0}),n(this,m,{writable:!0,value:void 0}),n(this,w,{writable:!0,value:void 0}),n(this,g,{writable:!0,value:{s:""}}),i(this,u,1),i(this,h,""),i(this,m,10)}};y.form.addEventListener("submit",(async e=>{e.preventDefault();const{query:t}=e.currentTarget.elements;if(""!==t.value.trim()){y.gallery.innerHTML="";try{M.query=t.value.trim();const e=await M.getData(),{meals:a}=e;M.pageReset(),M.totalPagesUpdate(a);let r=f(M.chunkOfItems());v(M.totalPages,M.page,r),M.pageUpdate()}catch(e){console.log(e)}finally{y.form.reset()}}})),y.loadMoreBtn.addEventListener("click",(async function(){try{let e=f(M.chunkOfItems());v(M.totalPages,M.page,e),M.pageUpdate()}catch(e){console.log(e)}})),window.addEventListener("load",(()=>{M.getRandomData().then((e=>{console.log(e),y.gallery.insertAdjacentHTML("beforeend",e.map((({meals:e})=>`<li class="meal__card" id="${e[0].idMeal}">\n        <img class="meal__pic" src="${e[0].strMealThumb}" alt="${e[0].strMeal}" />\n        <p class="meal__desc">${e[0].strMeal}</p>\n        </div>\n      </li>`)).join(""))}))}))}();
//# sourceMappingURL=foodService.504f5fa0.js.map
