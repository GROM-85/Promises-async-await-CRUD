{"mappings":"AAAA,MAAMA,WAAa,CAAC,QAAS,MAAO,WAE9BC,eAAiB,IAAMC,KAAKC,KAAqB,IAAhBD,KAAKE,UAEtCC,YAAeC,IACjB,IAAIC,EAHqBL,KAAKC,KAAqB,IAAhBD,KAAKE,UAIxC,OAAO,IAAII,SAAQ,CAACC,EAAQC,KACxBC,YAAW,KACJJ,EAAQ,IACPE,EAAQ,CAACH,YAAUC,UAEnBG,EAAO,CAACJ,YAAWC,QAAOK,MAAM,iBAAe,GAErDL,EAAA,GACN,EAGEM,SAAYb,WAAWc,KAAIC,GAAQV,YAAYU,KAErD,SAASC,WAAUV,UAACA,EAASC,MAACA,IAC1BU,QAAQC,IAAI,KAAKZ,cAAsBC,OAC3C,CAEA,SAASY,UAASb,UAACA,EAASC,MAACA,EAAKK,MAACA,IAC/BK,QAAQC,IAAI,IAAIN,MAAUN,iBAAyBC,OACvD,CAKAC,QAAQY,KAAKP,UACRQ,KAAKL,WACLM,MAAMH,UAKXX,QAAQe,IAAIV,UACPQ,MAAMG,IACHA,EAASC,QAAQT,UAAA,IAEpBM,MAAMH,UAIXX,QAAQkB,WAAWb,UACdQ,MAAMG,IACHP,QAAQC,IAAIM,GACZA,EAASC,SAAQ,EAAEE,SAAOC,SAAOC,YACf,cAAXF,EACCX,UAAUa,GAEVV,SAASS,EAAA,GAEjB,IAKRpB,QAAQsB,IAAIjB,UACPQ,MAAKG,IACFP,QAAQC,IAAIM,GACZR,UAAUQ,EAAA,IAEbF,OAAM,EAAES,YAAYA,EAAON,QAAQN,YAUxC,MAAMa,SAAW,gCAEjB,SAASC,QAAQC,GACb,IAAIC,EAAY,IAAIC,eAEpB,OAAO,IAAI5B,SAAQ,CAACC,EAAQC,KACxByB,EAAUE,KAAK,MAAML,SAAWE,GAChCC,EAAUG,OACVH,EAAUI,iBAAiB,QAAO,KAC9B9B,EAAQ0B,EAAA,IAEZA,EAAUI,iBAAiB,SAAS,KAChC7B,EAAOyB,EAAA,GACX,GAGR,CAEAF,QAAQ,WACCZ,MAAMmB,IACH,GAAmB,MAAhBA,EAAKb,OACJ,MAAM,IAAIc,MAAM,wBAEpB,OAAOC,KAAKC,MAAMH,EAAKhB,SAAQ,IAElCH,KAAKJ,QAAQC,KACbI,OAAOV,GAAUK,QAAQC,IAAIN","sources":["src/js/promises.js"],"sourcesContent":["const frameworks = ['React', 'Vue', 'Angular'];\n\nconst getRandomDelay = () => Math.ceil(Math.random() * 1000);\n\nconst makePromise = (framework) => {\n    let delay = getRandomDelay();\n    return new Promise((resolve,reject) =>{\n        setTimeout(() => {\n            if(delay < 500){\n                resolve({framework,delay});\n            }else{\n                reject({framework, delay, error:\"Promise error\"});\n            }\n        },delay)\n    })\n}\n\nconst promises =  frameworks.map(item => makePromise(item)); // array of promises\n\nfunction onSuccess({framework,delay}){\n    console.log(`🥝${framework} won with ${delay} ms`);\n}\n\nfunction onReject({framework,delay,error}){\n    console.log(`❌${error}! ${framework} rejected in ${delay} ms`);\n}\n\n// Promise.race([...]) return first settled => fullfilled OR rejected\n\n\nPromise.race(promises)\n    .then(onSuccess)\n    .catch(onReject);\n\n// Promise.all([...]) return whether all fullfilled OR one first rejected\n\n\nPromise.all(promises)\n    .then((response) => {\n        response.forEach(onSuccess)\n    })\n    .catch(onReject);\n\n    \n//Promise.allSettled([...]) return in then() response as [] of all resolved/rejected promises\nPromise.allSettled(promises)\n    .then((response) => {\n        console.log(response);\n        response.forEach(({status,reason,value}) => {\n            if(status === \"fulfilled\"){\n                onSuccess(value);\n            }else{\n                onReject(reason);\n            }\n        })\n    })\n    \n// Promise.any([...]) return any first resolved promise or all rejected\n\nPromise.any(promises)\n    .then(response => {\n        console.log(response);\n        onSuccess(response);\n    })\n    .catch(({errors}) => errors.forEach(onReject)); // error is object with properties : errors,message,stack\n\n//      {\n//     * errors: (3) [{…}, {…}, {…}]\n//     * message: \"All promises were rejected\"\n//     * stack: \"AggregateError: All promises were rejected\"\n//     * }\n\n\n// XMLHttpRequest\nconst BASE_URL = \"https://api.github.com/users/\"\n\nfunction getUser(userId){\n    let xhrequest = new XMLHttpRequest();\n\n    return new Promise((resolve,reject) =>{\n        xhrequest.open(\"GET\",BASE_URL + userId);\n        xhrequest.send();\n        xhrequest.addEventListener(\"load\",() =>{\n            resolve(xhrequest)\n        })\n        xhrequest.addEventListener(\"error\", () => {\n            reject(xhrequest)\n        })\n\n    })\n}\n\ngetUser(\"GROM-85\")\n        .then((data) => {\n            if(data.status !== 200){\n                throw new Error(\"OOps something wrong\")\n            }\n            return JSON.parse(data.response);\n        })\n        .then(console.log)\n        .catch((error) => console.log(error));\n       "],"names":["frameworks","getRandomDelay","Math","ceil","random","makePromise","framework","delay","Promise","resolve","reject","setTimeout","error","promises","map","item","onSuccess","console","log","onReject","race","then","catch","all","response","forEach","allSettled","status","reason","value","any","errors","BASE_URL","getUser","userId","xhrequest","XMLHttpRequest","open","send","addEventListener","data","Error","JSON","parse"],"version":3,"file":"promises.1344b625.js.map"}