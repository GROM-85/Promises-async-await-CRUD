{"mappings":"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","sources":["node_modules/@swc/helpers/src/_class_extract_field_descriptor.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_get.mjs","node_modules/@swc/helpers/src/_class_private_field_get.mjs","node_modules/@swc/helpers/src/_check_private_redeclaration.mjs","node_modules/@swc/helpers/src/_class_private_field_init.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_set.mjs","node_modules/@swc/helpers/src/_class_private_field_set.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_update.mjs","node_modules/@swc/helpers/src/_class_private_field_update.mjs","src/js/foodService/foodServAPI.js","src/js/foodService/renderFood.js","src/js/foodService/foodService.js"],"sourcesContent":["export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get.mjs';\n\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration.mjs\";\n\nexport default function _classPrivateFieldInit(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      // This should only throw in strict mode, but class bodies are\n      // always strict and private fields can only be used inside\n      // class bodies.\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorSet from './_class_apply_descriptor_set.mjs';\n\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n","export default function _classApplyDescriptorUpdate(receiver, descriptor) {\n    if (descriptor.set) {\n        if (!descriptor.get) {\n            throw new TypeError(\"attempted to read set only private field\");\n        }\n        if (!(\"__destrWrapper\" in descriptor)) {\n            descriptor.__destrWrapper = {\n                set value(v) {\n                    descriptor.set.call(receiver, v);\n                },\n                get value() {\n                    return descriptor.get.call(receiver);\n                },\n            };\n        }\n        return descriptor.__destrWrapper;\n    } else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n        return descriptor;\n    }\n}\n","import classExtractFieldDescriptor from \"./_class_extract_field_descriptor.mjs\";\nimport classApplyDescriptorUpdate from \"./_class_apply_descriptor_update.mjs\";\n\nexport default function _classPrivateFieldUpdate(receiver, privateMap) {\n    var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"update\");\n    return classApplyDescriptorUpdate(receiver, descriptor);\n}\n","import { previousDay } from \"date-fns\";\n\nexport class FoodApi{\n    #BASE_URL = \"https://www.themealdb.com/api/json/v1/1/search.php?\";\n    #RAND_URL = \"https://www.themealdb.com/api/json/v1/1/random.php?\";\n    #query;\n    #page;\n    #items;\n    #per_page;\n    #totalPages;\n\n    #options = {\n        s:\"\",\n    }\n\n    constructor(){\n        this.#page = 1;\n        this.#query = \"\";\n        this.#per_page = 10;\n    }\n\n    async getData(){\n        Object.assign(this.#options,{\n            s:this.#query\n        })\n        const response = await fetch(this.#BASE_URL + new URLSearchParams(this.#options));\n        if(!response.ok){\n            throw new Error(error);\n        }\n        return await response.json();\n    }\n\n    async getRandomData(){\n        const promises = [];\n        for(let i = 0;i < this.#per_page;i++){\n            const response = fetch(this.#RAND_URL).then(res => res.json());\n            promises.push(response);\n        }\n        return await Promise.all(promises)\n    }\n\n    pageUpdate(){\n        this.#page++;\n    }\n    pageReset(){\n        this.#page = 1;\n    }\n    get page(){\n        return this.#page;\n    }\n    set page(newPage){\n        this.#page = newPage;\n    }\n    get query(){\n        return this.#query;\n    }\n    set query(newQuery){\n        this.#query = newQuery;\n    }\n    get totalPages(){\n        return this.#totalPages;\n    }\n    totalPagesUpdate(items){\n        this.#items = items;\n        this.#totalPages = Math.ceil(this.#items.length/this.#per_page);\n    }\n    chunkOfItems(){\n        return this.#items.slice(this.#per_page * (this.#page - 1),this.#per_page)\n    }\n\n}","import { refs } from \"./foodService\";\n\nexport function renderMarkup(meals){\n    return meals.map(({strMeal,strMealThumb,idMeal})=>{\n        return `<li class=\"meal__card\" id=\"${idMeal}\">\n        <img class=\"meal__pic\" src=\"${strMealThumb}\" alt=\"${strMeal}\" />\n        <p class=\"meal__desc\">${strMeal}</p>\n        </div>\n      </li>`\n    }).join(\"\");\n}\n\nexport function renderRandom(items){\n    return items.map(({meals})=>{\n        return `<li class=\"meal__card\" id=\"${meals[0].idMeal}\">\n        <img class=\"meal__pic\" src=\"${meals[0].strMealThumb}\" alt=\"${meals[0].strMeal}\" />\n        <p class=\"meal__desc\">${meals[0].strMeal}</p>\n        </div>\n      </li>`\n    }).join(\"\");\n}\n\nexport function clearContent(){\n    refs.gallery.innerHTML = \"\";\n}\n\nexport function loadContent(total_pages,currPage,markup){\n    refs.gallery.insertAdjacentHTML(\"beforeend\",markup);\n    console.log(total_pages)\n    console.log(currPage)\n    if(total_pages <= currPage){\n        refs.loadMoreBtn.classList.add(\"is-hidden\");\n        return;\n    }\n    refs.loadMoreBtn.classList.remove(\"is-hidden\");\n}","import { FoodApi } from \"./foodServAPI\";\nimport * as render from \"./renderFood\";\n\nexport const refs = {\n    form: document.querySelector(\".js-search-form\"),\n    loadMoreBtn: document.querySelector(\".js-load-more\"),\n    gallery: document.querySelector(\".js-meals\"),\n}\n\nconst foodApi = new FoodApi();\n\nconst inputHandler = async(e) =>{\n    e.preventDefault();\n    const {query} = e.currentTarget.elements;\n    if(query.value.trim() === \"\") return;\n    render.clearContent();\n\n    try{\n        foodApi.query = query.value.trim();\n        const data = await foodApi.getData();\n       \n        const {meals} = data; \n        foodApi.pageReset();\n        foodApi.totalPagesUpdate(meals);\n        const items = foodApi.chunkOfItems();\n        let markup = render.renderMarkup(items);\n        render.loadContent(foodApi.totalPages,foodApi.page,markup)\n        foodApi.pageUpdate();\n    }catch(error){\n        console.log(error)\n    }\n    finally{\n        refs.form.reset();\n    }\n}\n\nasync function loadMoreHandler(){\n    try{\n        const items = foodApi.chunkOfItems();\n        let markup = render.renderMarkup(items);\n        render.loadContent(foodApi.totalPages,foodApi.page,markup)\n        foodApi.pageUpdate();\n    }\n    catch(error){\n        console.log(error)\n    }\n}\n\nrefs.form.addEventListener(\"submit\",inputHandler);\nrefs.loadMoreBtn.addEventListener(\"click\",loadMoreHandler);\n\n\n// get some random result when page is just loaded for preview\n\nwindow.addEventListener(\"load\",() => {\n    foodApi.getRandomData()\n            .then((result) => {\n                console.log(result)\n                refs.gallery.insertAdjacentHTML(\"beforeend\",render.renderRandom(result));\n                \n            });\n    \n})"],"names":["$99d26d6ae153323e$export$2e2bcd8739ae039","receiver","privateMap","action","has","TypeError","get","$77325facfa382e54$export$2e2bcd8739ae039","descriptor","call","value","$92121ed38d27acb0$export$2e2bcd8739ae039","$dba1998b20ced464$export$2e2bcd8739ae039","obj","privateCollection","$7efc65a322f137af$export$2e2bcd8739ae039","set","$dac75875e16c3833$export$2e2bcd8739ae039","writable","$9a4dad1b7a0c1382$export$2e2bcd8739ae039","$1aa398f79271969a$export$2e2bcd8739ae039","__destrWrapper","v","$473f4dc91b3d7aef$export$2e2bcd8739ae039","$c7b48aba02d30efc$var$_BASE_URL","WeakMap","$c7b48aba02d30efc$var$_RAND_URL","$c7b48aba02d30efc$var$_query","$c7b48aba02d30efc$var$_page","$c7b48aba02d30efc$var$_items","$c7b48aba02d30efc$var$_per_page","$c7b48aba02d30efc$var$_totalPages","$c7b48aba02d30efc$var$_options","$186a3cc036a8be76$export$add40575555c273c","meals","map","strMeal","strMealThumb","idMeal","join","$186a3cc036a8be76$export$3e4db78d73a102a4","total_pages","currPage","markup","$5ddf125b631bcf53$export$21666b427502ea6d","gallery","insertAdjacentHTML","console","log","loadMoreBtn","classList","add","remove","form","document","querySelector","$5ddf125b631bcf53$var$foodApi","async","Object","assign","this","s","response","fetch","URLSearchParams","ok","Error","error","json","promises","i","then","res","push","Promise","all","pageUpdate","pageReset","page","newPage","query","newQuery","totalPages","totalPagesUpdate","items","Math","ceil","length","chunkOfItems","slice","constructor","addEventListener","e","preventDefault","currentTarget","elements","trim","innerHTML","data","getData","reset","window","getRandomData","result"],"version":3,"file":"foodService.504f5fa0.js.map"}