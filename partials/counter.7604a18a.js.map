{"mappings":"YAAe,SAAAA,EAAsCC,EAAUC,EAAYC,GACzE,IAAKD,EAAWE,IAAIH,GAClB,MAAM,IAAII,UAAU,gBAAkBF,EAAS,kCAEjD,OAAOD,EAAWI,IAAIL,EACxB,CCLe,SAAAM,EAAkCN,EAAUO,GACzD,OAAIA,EAAWF,IACNE,EAAWF,IAAIG,KAAKR,GAEtBO,EAAWE,KACpB,CCFe,SAAAC,EAA+BV,EAAUC,GAEtD,OAAOK,EAAwBN,EADdD,EAA4BC,EAAUC,EAAY,OAErE,CCNe,SAAAU,EAAoCC,EAAKC,GACtD,GAAIA,EAAkBV,IAAIS,GACxB,MAAM,IAAIR,UAAU,iEAExB,CCFe,SAAAU,EAAgCF,EAAKX,EAAYQ,GAC9DE,EAA2BC,EAAKX,GAChCA,EAAWc,IAAIH,EAAKH,EACtB,CCLe,SAAAO,EAAkChB,EAAUO,EAAYE,GACrE,GAAIF,EAAWQ,IACbR,EAAWQ,IAAIP,KAAKR,EAAUS,OACzB,CACL,IAAKF,EAAWU,SAId,MAAM,IAAIb,UAAU,4CAEtBG,EAAWE,MAAQA,CACrB,CACF,CCTe,SAAAS,EAA+BlB,EAAUC,EAAYQ,GAGlE,OADAO,EAAwBhB,EADPD,EAA4BC,EAAUC,EAAY,OACrBQ,GACvCA,CACT,CCwBA,MAAMU,EAAUC,SAASC,cAAc,qBACjCC,EAAeF,SAASC,cAAc,kB,IAG1CE,EAAA,IAAAC,QAoDY,IArDd,MAYEC,WACEC,KAAKC,OACP,CAEAC,WACEF,KAAKC,OACP,CACAE,QACEH,KAAKC,MAAQ,CACf,CAEAG,WACEJ,KAAKK,cAAcC,YAAcN,KAAKC,KACxC,CACAM,iBACEC,aAAaC,QAAOzB,EAACgB,KAAMH,GAAMG,KAAKC,MACxC,CAEAS,kBACE,OAAOF,aAAaG,QAAO3B,EAACgB,KAAMH,KAAU,CAC9C,CACAe,aAAYC,OAACA,IAEX,GADAC,QAAQC,IAAIF,GACiB,aAA1BA,EAAOG,QAAQxC,OAChBwB,KAAKD,eAEF,IAA6B,aAA1Bc,EAAOG,QAAQxC,OAOnB,OAHAwB,KAAKG,QACLH,KAAKI,gBACLI,aAAaS,WAAUjC,EAACgB,KAAMH,IAL9BG,KAAKE,UAOP,CACAF,KAAKO,iBACLP,KAAKI,UACP,CA9CFc,aAAYb,cAACA,EAAac,gBAACA,GAAmB,CAAC,GAF/C/B,EAAAY,KAAAH,EAAA,C,uBAAA,IAGEG,KAAKK,cAAgBA,EACrBL,KAAKmB,gBAAkBA,EACvBnB,KAAKC,MAAQ,E,OACPJ,EAAQ,SAEdG,KAAKmB,gBAAgBC,iBAAiB,QAAQpB,KAAKY,YAAYS,KAAKrB,MAEtE,GA0CwB,CACxBK,cAAcT,EACduB,gBAAgB1B,G","sources":["node_modules/@swc/helpers/src/_class_extract_field_descriptor.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_get.mjs","node_modules/@swc/helpers/src/_class_private_field_get.mjs","node_modules/@swc/helpers/src/_check_private_redeclaration.mjs","node_modules/@swc/helpers/src/_class_private_field_init.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_set.mjs","node_modules/@swc/helpers/src/_class_private_field_set.mjs","src/js/counter.js"],"sourcesContent":["export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get.mjs';\n\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration.mjs\";\n\nexport default function _classPrivateFieldInit(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      // This should only throw in strict mode, but class bodies are\n      // always strict and private fields can only be used inside\n      // class bodies.\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorSet from './_class_apply_descriptor_set.mjs';\n\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n","// const actions = document.querySelectorAll(\"[data-action]\")\n// const counterValue = document.querySelector(\".counter-value\")\n\n// let counter = localStorage.getItem(\"COUNTER_KEY\") || 0\n// counterValue.textContent = counter;\n\n// actions.forEach(action => {\n//   action.addEventListener(\"click\", ()=>{\n//     const action_name = action.dataset.action\n\n//     switch (action_name){\n//       case \"decrease\":\n//         counter--\n//         localStorage.setItem(\"COUNTER_KEY\", JSON.stringify(counter))\n//         break;\n      \n//       case \"increase\":\n//         counter++\n//         localStorage.setItem(\"COUNTER_KEY\", JSON.stringify(counter))\n//         break;\n      \n//       case \"reset\":\n//         counter = 0\n//         localStorage.removeItem(\"COUNTER_KEY\")\n//         break\n//     }\n\n//     counterValue.textContent = counter;\n//   })\n// })\n\nconst actions = document.querySelector(\".counter-controls\");\nconst counterValue = document.querySelector(\".counter-value\");\n\nclass Counter{\n  #COUNT;\n\n  constructor({selectorValue,selectorControl} = {}){\n    this.selectorValue = selectorValue;\n    this.selectorControl = selectorControl; \n    this.count = 0;\n    this.#COUNT = \"count\";\n\n    this.selectorControl.addEventListener(\"click\",this.pollActions.bind(this));\n    \n  }\n  increase(){\n    this.count++;\n  }\n\n  decrease(){\n    this.count--;\n  }\n  reset(){\n    this.count = 0;\n  }\n\n  updateUI(){\n    this.selectorValue.textContent = this.count;\n  }\n  writeToStorage(){\n    localStorage.setItem(this.#COUNT,this.count);\n  }\n\n  readFromStorage(){\n    return localStorage.getItem(this.#COUNT) || 0;\n  }\n  pollActions({target}){\n    console.log(target)\n    if(target.dataset.action === \"increase\"){\n      this.increase();\n    }\n    else if(target.dataset.action === \"decrease\"){\n        this.decrease();\n      }\n      else{\n        this.reset();\n        this.updateUI();\n        localStorage.removeItem(this.#COUNT);\n        return;\n      }\n      this.writeToStorage()\n      this.updateUI();\n    }\n}\n\n\nlet counter = new Counter({\n  selectorValue:counterValue,\n  selectorControl:actions,\n});"],"names":["$99d26d6ae153323e$export$2e2bcd8739ae039","receiver","privateMap","action","has","TypeError","get","$77325facfa382e54$export$2e2bcd8739ae039","descriptor","call","value","$92121ed38d27acb0$export$2e2bcd8739ae039","$dba1998b20ced464$export$2e2bcd8739ae039","obj","privateCollection","$7efc65a322f137af$export$2e2bcd8739ae039","set","$dac75875e16c3833$export$2e2bcd8739ae039","writable","$9a4dad1b7a0c1382$export$2e2bcd8739ae039","$4b7e5379ef9b7853$var$actions","document","querySelector","$4b7e5379ef9b7853$var$counterValue","$4b7e5379ef9b7853$var$_COUNT","WeakMap","increase","this","count","decrease","reset","updateUI","selectorValue","textContent","writeToStorage","localStorage","setItem","readFromStorage","getItem","pollActions","target","console","log","dataset","removeItem","constructor","selectorControl","addEventListener","bind"],"version":3,"file":"counter.7604a18a.js.map"}