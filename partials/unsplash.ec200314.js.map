{"mappings":"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","sources":["node_modules/@swc/helpers/src/_class_extract_field_descriptor.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_get.mjs","node_modules/@swc/helpers/src/_class_private_field_get.mjs","node_modules/@swc/helpers/src/_check_private_redeclaration.mjs","node_modules/@swc/helpers/src/_class_private_field_init.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_set.mjs","node_modules/@swc/helpers/src/_class_private_field_set.mjs","node_modules/@swc/helpers/src/_class_apply_descriptor_update.mjs","node_modules/@swc/helpers/src/_class_private_field_update.mjs","src/js/unsplash/unsplashAPI.js","src/js/unsplash/renderMarkup.js","src/js/unsplash/unsplash.js"],"sourcesContent":["export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get.mjs';\n\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration.mjs\";\n\nexport default function _classPrivateFieldInit(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      // This should only throw in strict mode, but class bodies are\n      // always strict and private fields can only be used inside\n      // class bodies.\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor.mjs';\nimport classApplyDescriptorSet from './_class_apply_descriptor_set.mjs';\n\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n","export default function _classApplyDescriptorUpdate(receiver, descriptor) {\n    if (descriptor.set) {\n        if (!descriptor.get) {\n            throw new TypeError(\"attempted to read set only private field\");\n        }\n        if (!(\"__destrWrapper\" in descriptor)) {\n            descriptor.__destrWrapper = {\n                set value(v) {\n                    descriptor.set.call(receiver, v);\n                },\n                get value() {\n                    return descriptor.get.call(receiver);\n                },\n            };\n        }\n        return descriptor.__destrWrapper;\n    } else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n        return descriptor;\n    }\n}\n","import classExtractFieldDescriptor from \"./_class_extract_field_descriptor.mjs\";\nimport classApplyDescriptorUpdate from \"./_class_apply_descriptor_update.mjs\";\n\nexport default function _classPrivateFieldUpdate(receiver, privateMap) {\n    var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"update\");\n    return classApplyDescriptorUpdate(receiver, descriptor);\n}\n","export class unsplashAPI{\n\n    #BASE_URL = \"https://api.unsplash.com/search/photos/?\";\n    #API_KEY = \"dLJeZqeou3_BYhf5-_GYI9_T-1QpbbZYg0-MlkmGVyg\";\n\n    #page;\n    #query;\n\n    #options = {\n        client_id: this.#API_KEY,\n        query: this.#query,\n        per_page: 20,\n        page:this.#page,\n        color:'black',\n        orientation:'portrait',\n    }\n\n    constructor(){\n        this.#page = 1;\n        this.#query = '';\n    }\n\n    async getData(){\n        // options update\n        Object.assign(this.#options,{\n            page:this.#page,\n            query:this.#query,\n        });\n        const response = await fetch(this.#BASE_URL + new URLSearchParams(this.#options));\n        if(!response.ok){\n            throw new Error(error);\n        }\n        this.updatePage();\n        return await response.json();\n    }\n\n    get page(){\n        return this.#page;\n    }\n    set page(newValue){\n        this.#page = newValue;\n    }\n    updatePage(){\n        this.#page++;\n    }\n    resetPage(){\n        this.#page = 1;\n    }\n    get query(){\n        return this.#query;\n    }\n    set query(newValue){\n        this.#query = newValue;\n    }\n}","import { refs } from \"./unsplash\";\n\nexport function renderMaprkup({results}){\n    return results.map(({urls,alt_description}) => {\n        return `<li class=\"gallery__item\">\n        <img src=\"${urls.small}\" alt=\"${alt_description}\" class=\"gallery-img\">\n    </li>`\n    }).join(\"\");\n}\n\nexport function clearContent(){\n    refs.gallery.innerHTML = \"\";\n}\n\nexport function  uploadImages(totalPages,currPage,markup){\n    \n    refs.gallery.insertAdjacentHTML(\"beforeend\",markup);\n    if(currPage > totalPages){ \n        refs.loadMoreBtn.classList.add(\"is-hidden\");\n        return;\n    }\n    refs.loadMoreBtn.classList.remove(\"is-hidden\");\n}","import { unsplashAPI } from \"./unsplashAPI\";\nimport { renderMaprkup,clearContent,uploadImages } from \"./renderMarkup\";\n\nexport const refs = {\n    form: document.querySelector(\".js-search-form\"),\n    loadMoreBtn: document.querySelector(\".js-load-more\"),\n    gallery: document.querySelector(\".js-gallery\"),\n}\nconst fetchApi = new unsplashAPI();\n\nasync function formHandler(event){\n        event.preventDefault();\n        const {query} = event.currentTarget.elements;\n        if(query.value === \"\") return;\n\n        try{\n            fetchApi.query = query.value.trim();\n            fetchApi.resetPage();\n            clearContent();\n            const data = await fetchApi.getData();\n            const {total_pages} = data;\n            const markup = renderMaprkup(data);\n            uploadImages(total_pages,fetchApi.page,markup);\n        }\n        catch(error){\n            console.log(error)\n        }\n        finally{\n            refs.form.reset();\n        }      \n}\n\nasync function loadMoreHandler(){\n    try{\n        const data = await fetchApi.getData();\n        const {total_pages} = data;\n        const markup = renderMaprkup(data);\n        uploadImages(total_pages,fetchApi.page,markup);\n    }\n    catch(error){\n        console.log(error)\n    }\n}\nrefs.form.addEventListener(\"submit\",formHandler);\nrefs.loadMoreBtn.addEventListener(\"click\",loadMoreHandler)"],"names":["$99d26d6ae153323e$export$2e2bcd8739ae039","receiver","privateMap","action","has","TypeError","get","$77325facfa382e54$export$2e2bcd8739ae039","descriptor","call","value","$92121ed38d27acb0$export$2e2bcd8739ae039","$dba1998b20ced464$export$2e2bcd8739ae039","obj","privateCollection","$7efc65a322f137af$export$2e2bcd8739ae039","set","$dac75875e16c3833$export$2e2bcd8739ae039","writable","$9a4dad1b7a0c1382$export$2e2bcd8739ae039","$1aa398f79271969a$export$2e2bcd8739ae039","__destrWrapper","v","$473f4dc91b3d7aef$export$2e2bcd8739ae039","$d71ceffb8215bc63$var$_BASE_URL","WeakMap","$d71ceffb8215bc63$var$_API_KEY","$d71ceffb8215bc63$var$_page","$d71ceffb8215bc63$var$_query","$d71ceffb8215bc63$var$_options","$bf367b25c366596c$export$58e817d297ee2bfa","results","map","urls","alt_description","small","join","$bf367b25c366596c$export$633f5b6169e2b910","totalPages","currPage","markup","$4b3b875d1ce47048$export$21666b427502ea6d","gallery","insertAdjacentHTML","loadMoreBtn","classList","add","remove","form","document","querySelector","$4b3b875d1ce47048$var$fetchApi","async","Object","assign","this","page","query","response","fetch","URLSearchParams","ok","Error","error","updatePage","json","newValue","resetPage","constructor","client_id","per_page","color","orientation","addEventListener","event","preventDefault","currentTarget","elements","trim","innerHTML","data","getData","total_pages","console","log","reset"],"version":3,"file":"unsplash.ec200314.js.map"}