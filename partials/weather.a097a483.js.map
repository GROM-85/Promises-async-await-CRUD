{"mappings":"gfAAO,SAAUA,IACb,GAAGC,UAAUC,YACT,OAAO,IAAIC,SAAQ,CAACC,EAAQC,KACxBJ,UAAUC,YAAYI,mBAAmBF,EAAQC,EAAA,GAE7D,CCLO,MAAME,EAAU,mCAEVC,EAAa,CACtBC,MAAOF,EACPG,EAAG,GACHC,MAAM,SACNC,KAAK,MAGIC,EAAY,CACrBJ,MAAOF,EACPO,IAAK,GACLC,IAAK,GACLJ,MAAM,SACNC,KAAM,MCdV,IAAAI,EAAAC,EAAA,SAEO,MAAMC,EAAcC,IACvB,MAAMC,KAACA,GAAQD,GACTE,KAACA,EAAIC,WAACA,EAAUC,SAACA,GAAYJ,EAAKK,MAClCC,QAACA,EAAOC,QAACA,EAAOC,OAACA,GAAUR,EAAKS,KAChCC,YAACA,EAAWC,KAAEA,GAAQX,EAAKY,QAAQ,IACnCC,MAACA,GAASb,EAAKc,KAErB,IAAIC,GAAc,EAAAlB,EAAAmB,SAAO,IAAIC,KAAe,IAAVV,GAAgB,SAC9CW,GAAa,EAAArB,EAAAmB,SAAO,IAAIC,KAAc,IAATT,GAAe,SAIhD,OAHAW,QAAQC,IAAIL,GACZI,QAAQC,IAAIF,GAEL,2DACuBjB,MAASK,gCACpBe,KAAKC,MAAMpB,wFAEkBS,iEACnBD,gEAESW,KAAKC,MAAMnB,mDACfC,+CACFS,mDACAE,4CACFG,mBACzB,ECdHK,EAAYC,SAASC,cAAc,eACnCC,EAAcF,SAASC,cAAc,qBACrCE,EAAYH,SAASC,cAAc,eACnCG,EAAUJ,SAASC,cAAc,YACjCI,EAAW,IChBV,MAMHC,cAAcC,GACVZ,QAAQC,IAAIY,KAAKC,KACjB,MAAMC,QAAiBC,MAAMH,KAAKC,IAAM,IAAIG,gBAAgBL,IAC5D,IAAIG,EAASG,GACT,MAAM,IAAIC,MAAM,2BAGpB,OADAnB,QAAQC,IAAIc,SACCA,EAASK,MAC1B,CAZAC,aAAYP,IAACA,GAAO,CAAC,GACjBD,KAAKC,IAAMA,CACf,GDY4B,CAACA,IFfT,qDEkCxBH,eAAeW,IACX,IACIC,IACArD,EAAWE,EAAIgC,EAAUoB,MAAMC,OAC/B,MAAMV,QAAiBL,EAASgB,QAAQxD,GAClCyD,EAAS/C,EAAWmC,GAC1BN,EAAQmB,mBAAmB,YAAYD,EAO3C,CALA,MAAME,GACF7B,QAAQC,IAAI4B,EAAMC,QACtB,SAEI1B,EAAUoB,MAAQ,EACtB,CACJ,CAEA,SAASD,IACLd,EAAQsB,UAAY,EACxB,CAEAxB,EAAYyB,iBAAiB,SArC7BrB,iBACI,IACIY,IACA,MAAOU,QAASC,SAACA,EAAQC,UAACA,UAAoBzE,IAC9Ca,EAAUC,IAAM0D,EAChB3D,EAAUE,IAAM0D,EAEhB,MAAMpB,QAAiBL,EAASgB,QAAQnD,GACxCyB,QAAQC,IAAIc,GACZ,MAAMY,EAAS/C,EAAWmC,GAC1BN,EAAQmB,mBAAmB,YAAYD,EAI3C,CAFC,MAAME,GACH7B,QAAQC,IAAI4B,EAAMC,QACtB,CACJ,IAuBAtB,EAAUwB,iBAAiB,QAAQV,GACnClB,EAAU4B,iBAAiB,SAASI,IACnB,UAAVA,EAAEC,KACDf,GAAA,G","sources":["src/js/weather/getGeoposition.js","src/js/weather/weather_const.js","src/js/weather/renderMarkup.js","src/js/weather/weather.js","src/js/weather/weatherAPI.js"],"sourcesContent":["export function  getPosition(){\n    if(navigator.geolocation){\n        return new Promise((resolve,reject)=> {\n            navigator.geolocation.getCurrentPosition(resolve,reject)}) // resolve(position) OR reject(error)\n    }  \n};\n\n\n\n","export const API_KEY = 'e54a017c96b5e417c1c8ce7b4e12bcdd';\nexport const BASE_URL = 'https://api.openweathermap.org/data/2.5/weather?';\nexport const optsByCity = {\n    appid: API_KEY,\n    q: '',\n    units:\"metric\",\n    lang:\"en\",\n\n}\nexport const optsByPos = {\n    appid: API_KEY,\n    lat: '',\n    lon: '',\n    units:\"metric\",\n    lang: \"en\",\n}\n\n","import { format } from \"date-fns\";\n\nexport const makeMarkup = (data) => {\n    const {name} = data;\n    const {temp,feels_like,humidity} = data.main;\n    const {country,sunrise,sunset} = data.sys;\n    const {description, icon} = data.weather[0];\n    const {speed} = data.wind;\n\n    let sunriseTime = format(new Date(sunrise * 1000),'HH:mm');\n    let sunsetTime = format(new Date(sunset * 1000),'HH:mm');\n    console.log(sunriseTime)\n    console.log(sunsetTime)\n\n    return ` <div class=\"weather\">\n    <h2 class=\"city\">Weather in ${name}, ${country}</h2>\n    <h1 class=\"temp\">${Math.floor(temp)}°C</h1>\n    <div class=\"flex\">\n      <img src=\"https://openweathermap.org/img/wn/${icon}.png\" alt=\"\" class=\"icon\" />\n      <div class=\"description\">${description}</div>\n    </div>\n    <div class=\"feels_like\">Feels like: ${Math.floor(feels_like)}°C</div>\n    <div class=\"humidity\">Humidity: ${humidity}%</div>\n    <div class=\"wind\">Wind speed: ${speed} km/h</div>\n    <div class=\"sunrise\">Sunrise: ${sunriseTime}</div>\n    <div class=\"sunset\">Sunset: ${sunsetTime}</div>\n  </div>`;\n\n}","//TODO:\n// 1 MARKUP\n// 2 FETCH API\n// 3 GET GEOPOSITION\n// 4 const file\n'use strict'\nimport {WeatherAPI} from \"./weatherAPI\";\nimport { getPosition } from \"./getGeoposition\";\nimport { BASE_URL,optsByCity,optsByPos } from \"./weather_const\";\nimport { makeMarkup } from \"./renderMarkup\";\n\n\nconst inputCity = document.querySelector(\".search-bar\");\nconst locationBtn = document.querySelector('#get_location_btn');\nconst searchBtn = document.querySelector('#search_btn');\nconst content = document.querySelector('.content');\nconst fetchApi = new WeatherAPI({url: BASE_URL});\n\nasync function geoSearchHandler(){\n    try{\n        clearContent();\n        const {coords : {latitude,longitude}} = await getPosition();\n        optsByPos.lat = latitude;\n        optsByPos.lon = longitude;\n\n        const response = await fetchApi.getData(optsByPos);\n        console.log(response)\n        const markup = makeMarkup(response);\n        content.insertAdjacentHTML('beforeend',markup);\n\n    }catch(error){\n        console.log(error.message)\n    }\n}\n\nasync function inputHandler(){\n    try {\n        clearContent();\n        optsByCity.q = inputCity.value.trim();\n        const response = await fetchApi.getData(optsByCity);\n        const markup = makeMarkup(response);\n        content.insertAdjacentHTML('beforeend',markup);\n    }\n    catch(error){\n        console.log(error.message)\n    }\n    finally{\n        inputCity.value = \"\";\n    }\n}\n\nfunction clearContent(){\n    content.innerHTML = \"\";\n}\n\nlocationBtn.addEventListener(\"click\",geoSearchHandler);\nsearchBtn.addEventListener(\"click\",inputHandler);\ninputCity.addEventListener(\"keyup\",(e) => {\n    if(e.key === \"Enter\"){\n        inputHandler();\n    }\n})","export class WeatherAPI {\n\n    constructor({url} = {}){\n        this.url = url;\n    }\n\n    async getData(options){\n        console.log(this.url);\n        const response = await fetch(this.url + new URLSearchParams(options))   \n        if(!response.ok){\n            throw new Error(\"Ooops smthg went wrong!\");\n        }\n        console.log(response);\n        return await response.json();\n    }\n}"],"names":["$a80e6077b207a553$export$1690e12b840569b9","navigator","geolocation","Promise","resolve","reject","getCurrentPosition","$70ab23f73f179fae$export$a9861bd62f48e142","$70ab23f73f179fae$export$7c6aabf57a806957","appid","q","units","lang","$70ab23f73f179fae$export$33fb2f6050eb69b","lat","lon","$iAkvZ","parcelRequire","$5cb80c000fb713fc$export$59302306c6f78677","data","name","temp","feels_like","humidity","main","country","sunrise","sunset","sys","description","icon","weather","speed","wind","sunriseTime","default","Date","sunsetTime","console","log","Math","floor","$ff57ec31b9caf2cc$var$inputCity","document","querySelector","$ff57ec31b9caf2cc$var$locationBtn","$ff57ec31b9caf2cc$var$searchBtn","$ff57ec31b9caf2cc$var$content","$ff57ec31b9caf2cc$var$fetchApi","async","options","this","url","response","fetch","URLSearchParams","ok","Error","json","constructor","$ff57ec31b9caf2cc$var$inputHandler","$ff57ec31b9caf2cc$var$clearContent","value","trim","getData","markup","insertAdjacentHTML","error","message","innerHTML","addEventListener","coords","latitude","longitude","e","key"],"version":3,"file":"weather.a097a483.js.map"}